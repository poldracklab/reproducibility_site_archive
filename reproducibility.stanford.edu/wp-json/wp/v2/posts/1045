{"id":1045,"date":"2020-08-10T18:39:01","date_gmt":"2020-08-10T18:39:01","guid":{"rendered":"http:\/\/reproducibility.stanford.edu\/?p=1045"},"modified":"2024-12-04T18:37:38","modified_gmt":"2024-12-04T18:37:38","slug":"coding-error-postmortem","status":"publish","type":"post","link":"https:\/\/reproducibility.stanford.edu\/coding-error-postmortem\/","title":{"rendered":"Coding error postmortem"},"content":{"rendered":"<p class=\"c8\">By Russ Poldrack, McKenzie Hagen, and Patrick Bissett<\/p>\n<p class=\"c8\">When it comes to computer programming, errors are simply a fact of life. \u00a0<span class=\"c2\"><a class=\"c3\" href=\"https:\/\/www.google.com\/url?q=https:\/\/resources.sei.cmu.edu\/asset_files\/TechnicalReport\/2003_005_001_14243.pdf&amp;sa=D&amp;ust=1597084849266000&amp;usg=AOvVaw03bL0nEnTLKQpTU9Qr0sZw\">One study<\/a><\/span>\u00a0of professional software development teams from a number of different organizations of different sizes found that developers in the best managed organizations had an average of 1.05 defects per 1000 lines of code, whereas the worst managed organizations had an average of 7.5 defects per 1000 lines of code; <span class=\"c2\"><a class=\"c3\" href=\"https:\/\/www.google.com\/url?q=https:\/\/books.google.com\/books?hl%3Den%26lr%3D%26id%3DpDsFCAAAQBAJ%26oi%3Dfnd%26pg%3DPR1%26dq%3D%2BMcConnell%2BS%2B:%2BCode%2Bcomplete%2B.%2BMicrosoft%2BPress,%2BRedmond,%2BWash.%2B2004%2B%2BReference%2BSource%2B%2B%26ots%3DRmOuNFywSZ%26sig%3Dx9P8hCYbWjBgg-1R8QTIwaakYqs%23v%3Donepage%26q%26f%3Dfalse&amp;sa=D&amp;ust=1597084849266000&amp;usg=AOvVaw12fTO5kuhz7ChCN4WLMwWW\">other estimates<\/a><\/span>\u00a0place the number much higher from 15 to 50 errors per 1000 lines. \u00a0It\u2019s <span class=\"c2\"><a class=\"c3\" href=\"https:\/\/www.google.com\/url?q=https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC4629271\/&amp;sa=D&amp;ust=1597084849267000&amp;usg=AOvVaw3lMXPr2lIgu_xgXlsY7a2U\">hard to imagine<\/a><\/span>\u00a0that the error levels will be any lower when the code is written by scientists with minimal training in software engineering. \u00a0I have previously discussed an example of a <span class=\"c2\"><a class=\"c3\" href=\"https:\/\/www.google.com\/url?q=http:\/\/www.russpoldrack.org\/2013\/02\/anatomy-of-coding-error.html&amp;sa=D&amp;ust=1597084849267000&amp;usg=AOvVaw2uejpf_kc3FEuTTTlDWwn-\">small coding error having large effects on results<\/a><\/span>, and the case of Geoffrey Chang, who <span class=\"c2\"><a class=\"c3\" href=\"https:\/\/www.google.com\/url?q=https:\/\/science.sciencemag.org\/content\/314\/5807\/1856.summary%23:~:text%3DSummary,journals%2520also%2520contain%2520erroneous%2520structures.&amp;sa=D&amp;ust=1597084849268000&amp;usg=AOvVaw0WevdvZfH4eBD6-AdBo_DA\">had to retract several papers (including three Science papers) due to an error in a homegrown software package<\/a><\/span>, <span class=\"c1\">provides a striking example of just what kind of impact an error can have. \u00a0By talking about errors openly, we normalize them and help move from a position of defensiveness to one of learning and process improvement. \u00a0In this spirit, below we discuss a recent error in one of our lab\u2019s projects.<\/span><\/p>\n<p class=\"c8\">We had posted a <span class=\"c2\"><a class=\"c3\" href=\"https:\/\/www.google.com\/url?q=https:\/\/www.biorxiv.org\/content\/10.1101\/2020.05.08.084707v2?versioned%3Dtrue&amp;sa=D&amp;ust=1597084849268000&amp;usg=AOvVaw3S0O1t8GNioSrtY8hhUID1\">preprint<\/a><\/span>\u00a0describing some issues that we had identified with the stop-signal task in the ABCD Study, along with the <span class=\"c2\"><a class=\"c3\" href=\"https:\/\/www.google.com\/url?q=https:\/\/github.com\/mckenziephagen\/ABCD_Stop_Signal&amp;sa=D&amp;ust=1597084849268000&amp;usg=AOvVaw0lrgg2Qo9rQxQVrAxYNpIC\">code used for all of the analyses<\/a><\/span>. \u00a0The ABCD stop-signal team performed a detailed review our code and notified us of an error in the code that resulted in inaccurate estimation of one of the basic behavioral measures on the task (subsequently described in their <span class=\"c2\"><a class=\"c3\" href=\"https:\/\/www.google.com\/url?q=https:\/\/www.biorxiv.org\/content\/10.1101\/2020.07.27.223057v1&amp;sa=D&amp;ust=1597084849269000&amp;usg=AOvVaw0xURc3oHd0kO2h7wVyALb-\">response to our preprint<\/a><\/span>). \u00a0The <span class=\"c2\"><a class=\"c3\" href=\"https:\/\/www.google.com\/url?q=https:\/\/github.com\/mckenziephagen\/ABCD_Stop_Signal\/blob\/master\/scripts\/SST_manuscript\/clean_SST.ipynb&amp;sa=D&amp;ust=1597084849269000&amp;usg=AOvVaw3rvZcQfgu-IPUl1fB7T73q\">code in question<\/a><\/span>\u00a0converted from the Byzantine E-Prime output files containing the raw data to a data format that was more easily usable for our analyses. \u00a0In particular, because E-Prime spreads information across various columns, different trial types required combining multiple columns in different ways. \u00a0The code in question used an overly complex indexing scheme\u00a0(in particular, using a double negative [<span class=\"c5\">~ isnull()<\/span>] rather than a more intuitive data frame operation [<span class=\"c5\">notnull()<\/span><span class=\"c1\">]), which made it difficult to parse the Boolean logic of the code and thus more difficult to readily apprehend the error. \u00a0In addition, the size and complexity of the input data made it difficult to perform visual spot checks that might have otherwise identified the issue. <\/span><\/p>\n<p class=\"c8\"><span class=\"c1\">In hindsight, a relatively simple assertion would have identified the problem:<\/span><\/p>\n<blockquote>\n<p class=\"c8\"><span class=\"c5\">assert \u00a0df[response column][trial type index].isnull().all() <\/span><\/p>\n<\/blockquote>\n<p class=\"c8\"><span class=\"c1\">The trial type index referenced above is selecting for a trial type that should not have any values in a specific column that records responses, and an assertion that all of the values in the column should be null would have raised a red flag that trials of a different trial type were being selected in this index as well.<\/span><\/p>\n<p class=\"c8\">Once the error in our code had been confirmed, we reanalyzed the data, confirming that one of the results in the preprint had changed. \u00a0Based on this, we uploaded a <span class=\"c2\"><a class=\"c3\" href=\"https:\/\/www.biorxiv.org\/content\/10.1101\/2020.05.08.084707v4\">revised version of our preprint to Biorxiv<\/a><\/span><span class=\"c1\">, and notified the action editor at the journal where the paper was under review of the error and the revised manuscript.<\/span><\/p>\n<p class=\"c8\">We also undertook an internal process to try to learn from the error. \u00a0We patterned this after the <span class=\"c2\"><a class=\"c3\" href=\"https:\/\/www.google.com\/url?q=https:\/\/en.wikipedia.org\/wiki\/Morbidity_and_mortality_conference&amp;sa=D&amp;ust=1597084849271000&amp;usg=AOvVaw3Uw8x8a_BXF2hNiqQ5zFHj\">morbidity and mortality conferences<\/a><\/span><span class=\"c1\">\u00a0that are a standard practice at major medical centers, in which physicians discuss problematic outcomes in a confidential setting in order to understand what went wrong and how it might have been prevented. \u00a0We spent part of our weekly lab meeting discussing in detail exactly how the error had come about, and what we might have done to fix it. No one likes talking about errors, but our discussion was focused on process improvement rather than blame, which made it easier for everyone to talk about it. \u00a0In this particular case, we identified two global issues that likely contributed to the error:<\/span><\/p>\n<ol>\n<li>First, the individual who had reviewed the analysis code for the project had focused on one script that implemented the majority of the analyses and did not review the preprocessing script which included the error.<\/li>\n<li>A more general issue that we flagged was a speed\/accuracy tradeoff; because we were pushing to share the work quickly (as it provided suggested solutions to design issues in a large longitudinal study that is ongoing, so was highly time sensitive), our checking was likely not as systematic as it would have been if time had not been of the essence.<\/li>\n<\/ol>\n<p>There is also always the possibility of unintentional \u201cbug-hacking\u201d &#8212; that is, the degree to which<span class=\"c2\"><a class=\"c3\" href=\"https:\/\/www.google.com\/url?q=http:\/\/www.russpoldrack.org\/2016\/08\/the-principle-of-assumed-error.html&amp;sa=D&amp;ust=1597084849272000&amp;usg=AOvVaw1sXgWsCSn_CoNrObEiSIO2\">\u00a0bugs are more likely to be found when they contradict our hypothesis<\/a><\/span>. \u00a0In this case, the coding error inflated a value in a way that was in line with our expectations.<\/p>\n<p class=\"c8\"><span class=\"c1\">We learned a couple of important lessons from this experience:<\/span><\/p>\n<ol class=\"c11 lst-kix_m8rvakomane6-0 start\" start=\"1\">\n<li class=\"c6\">Time pressure is ubiquitous but also pernicious when it comes to science. \u00a0The speed\/accuracy tradeoff is a fundamental feature of human behavior, whether it comes to experimental tasks or software development. \u00a0In the future we will <span class=\"c1\">exert extra quality control in cases where speed is essential (e.g. bringing in one of our team\u2019s expert software developers for an external review).<\/span><\/li>\n<li class=\"c6\"><span class=\"c1\">It\u2019s essential to have a full description of the entire workflow from the primary data to the final results. \u00a0This can be especially challenging when different parts of the workflow are run on different computer systems, as is common in big-data settings. \u00a0The provenance of any intermediate files need to be crystal-clear; it\u2019s common for data to be treated as \u201craw\u201d even after they have gone through some preprocessing, e.g. to reformat the data into a more usable format, and these preprocessing steps need to be tracked and reviewed just as the analysis code is.<\/span><\/li>\n<\/ol>\n<p class=\"c9\"><span class=\"c1\">We have also started a couple of new practices in the lab to help reduce the likelihood of errors in the future. First, we have started holding lab-wide code review sessions as part of our regular lab meeting. In these sessions, we walk through code written by a member of the lab in order to identify errors and also talk about ways in which the code could be improved. There are several books that have been very helpful for some of us in learning about how to write better code, which others may also find helpful:<\/span><\/p>\n<ul class=\"c11 lst-kix_ehoh5cpd1691-0 start\">\n<li class=\"c6\"><span class=\"c2\"><a class=\"c3\" href=\"https:\/\/www.google.com\/url?q=https:\/\/www.oreilly.com\/library\/view\/code-complete-second\/0735619670\/&amp;sa=D&amp;ust=1597084849273000&amp;usg=AOvVaw20ZpX3gbt1Mxhihrx9gOZN\">Code Complete (2nd Edition) by Steve McConnell<\/a><\/span><\/li>\n<li class=\"c6\"><span class=\"c2\"><a class=\"c3\" href=\"https:\/\/www.google.com\/url?q=https:\/\/www.oreilly.com\/library\/view\/clean-code\/9780136083238\/&amp;sa=D&amp;ust=1597084849273000&amp;usg=AOvVaw2Ix-b4AqmVkA45sZ90r5Po\">Clean Code, by Robert C. Marti<\/a><\/span><span class=\"c0\">n<\/span><\/li>\n<li class=\"c6\"><span class=\"c2\"><a class=\"c3\" href=\"https:\/\/www.google.com\/url?q=https:\/\/martinfowler.com\/books\/refactoring.html&amp;sa=D&amp;ust=1597084849274000&amp;usg=AOvVaw3J1cOiOH3UYEzlG3aLsQqi\">Refactoring, by Martin Fowler<\/a><\/span><\/li>\n<\/ul>\n<p class=\"c9\">Second, we are working to increase the amount of testing that is applied to our code. \u00a0This started with a tutorial on <span class=\"c2\"><a class=\"c3\" href=\"https:\/\/www.google.com\/url?q=https:\/\/github.com\/poldrack\/pytest_tutorial&amp;sa=D&amp;ust=1597084849274000&amp;usg=AOvVaw32Zrei5lljSKnHZ83kSpFk\">testing using pytest<\/a><\/span>\u00a0in our lab meeting, and will likely continue with more advanced topics in the future. \u00a0These practices will not prevent us from making errors (as <span class=\"c2\"><a class=\"c3\" href=\"https:\/\/www.google.com\/url?q=https:\/\/hownot2code.com\/2016\/11\/28\/why-software-will-never-be-bugless\/&amp;sa=D&amp;ust=1597084849274000&amp;usg=AOvVaw05dskG3BNGHOwQtq9b3JKY\">bug-free code is practically impossible)<\/a><\/span><span class=\"c1\">, but they will hopefully reduce their prevalence and their impact on our work in the future. \u00a0We also hope that others will be willing to openly discuss their errors in order to normalize this discussion and provide insights that could be helpful for others in detecting and preventing errors.<\/span><\/p>\n","protected":false},"excerpt":{"rendered":"<p>By Russ Poldrack, McKenzie Hagen, and Patrick Bissett When it comes to computer programming, errors are simply a fact of life. \u00a0One study\u00a0of professional software development teams from a number of different organizations of different sizes found that developers in the best managed organizations had an average of 1.05 defects per 1000 lines of code, [&hellip;]<\/p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"_exactmetrics_skip_tracking":false,"_exactmetrics_sitenote_active":false,"_exactmetrics_sitenote_note":"","_exactmetrics_sitenote_category":0,"footnotes":""},"categories":[6],"tags":[],"class_list":["post-1045","post","type-post","status-publish","format-standard","hentry","category-blog"],"_links":{"self":[{"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/posts\/1045","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/comments?post=1045"}],"version-history":[{"count":10,"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/posts\/1045\/revisions"}],"predecessor-version":[{"id":1060,"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/posts\/1045\/revisions\/1060"}],"wp:attachment":[{"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/media?parent=1045"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/categories?post=1045"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/tags?post=1045"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}
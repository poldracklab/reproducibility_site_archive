{"id":529,"date":"2018-02-22T02:32:43","date_gmt":"2018-02-22T02:32:43","guid":{"rendered":"http:\/\/reproducibility.stanford.edu\/?p=529"},"modified":"2019-10-24T01:40:00","modified_gmt":"2019-10-24T01:40:00","slug":"bids-tutorial-series-part-1b","status":"publish","type":"post","link":"https:\/\/reproducibility.stanford.edu\/bids-tutorial-series-part-1b\/","title":{"rendered":"BIDS Tutorial Series: Automate the Introductory Walkthrough"},"content":{"rendered":"<p style=\"text-align: left;\"><b>Introduction<\/b><\/p>\n<p><span style=\"font-weight: 400;\">Welcome to part 1B of the tutorial series \u201cGetting Started with BIDS\u201d. This tutorial will illustrate how one can automate the conversation of DICOMs into a valid BIDS dataset. This tutorial will follow the same workflow detailed in <a href=\"http:\/\/reproducibility.stanford.edu\/bids-tutorial-series-part-1a\/\">part 1A<\/a> of this tutorial series. We will be using DICOMs from the\u00a0<a href=\"http:\/\/fcon_1000.projects.nitrc.org\/indi\/pro\/eNKI_RS_TRT\/FrontPage.html\">Nathan Kline Institute (NKI) Rockland Sample &#8211; Multiband Imaging Test-Retest Pilot Dataset<\/a>. We will be following the specifications described in the\u00a0<a href=\"http:\/\/bids.neuroimaging.io\/bids_spec1.0.2.pdf\">BIDS Specification version 1.0.2<\/a><\/span><span style=\"font-weight: 400;\">. If you are running into issues, please post your questions on\u00a0<a href=\"https:\/\/neurostars.org\/tags\/bids\">NeuroStars<\/a>\u00a0with the bids tag. The next parts of this tutorial series will examine off-the-shelf solutions to consider using to convert your dataset into the BIDS standard.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Table of Contents<br \/>\n<\/span><\/p>\n<p><span style=\"font-weight: 400;\">B.\u00a0<a href=\"#auto\">Automated custom conversation<\/a><\/span><\/p>\n<ol>\n<li><a href=\"#auto1\">Initialize script and create the dataset_description file<\/a><\/li>\n<li><a href=\"#auto2\">Create anatomical folders and convert\u00a0dicoms<\/a><\/li>\n<li><a href=\"#auto3\">Rename anatomical files<\/a><\/li>\n<li><a href=\"#auto4\">Organize anatomical files and validate<\/a><\/li>\n<li><a href=\"#auto5\">Create diffusion folders and convert\u00a0dicoms<\/a><\/li>\n<li><a href=\"#auto6\">Rename diffusion files<\/a><\/li>\n<li><a href=\"#auto7\">Organize diffusion files and validate<\/a><\/li>\n<li><a href=\"#auto8\">Create functional folders and convert\u00a0dicoms<\/a><\/li>\n<li><a href=\"#auto9\">Rename and organize functional files<\/a><\/li>\n<li><a href=\"#auto10\">Task event\u00a0tsv\u00a0files<\/a><\/li>\n<li><a href=\"#auto11\">Fix errors<\/a><\/li>\n<li><a href=\"#auto12\">Validate and add participant<\/a><a id=\"man\"><\/a><\/li>\n<\/ol>\n<p>&nbsp;<\/p>\n<p><a id=\"auto\"><\/a><strong>1B. Automated Custom Solution<\/strong><\/p>\n<p><span style=\"font-weight: 400;\">The automated custom solution is going through the same process done in <a href=\"http:\/\/reproducibility.stanford.edu\/bids-tutorial-series-part-1a\/\">part 1A<\/a>, but with a script. The\u00a0<a href=\"https:\/\/github.com\/franklin-feingold\/BIDS-Example-NKI-RS-Multiband-Imaging\">automated custom solution<\/a>\u00a0is written in a bash shell script. This script is dependent upon\u00a0<a href=\"https:\/\/brew.sh\/\">homebrew<\/a>,\u00a0<a href=\"https:\/\/github.com\/jpmens\/jo\">jo<\/a>,\u00a0<a href=\"https:\/\/stedolan.github.io\/jq\/download\/\">jq<\/a>,\u00a0<a href=\"https:\/\/github.com\/rordenlab\/dcm2niix\/releases\/tag\/v1.0.20171215\">dcm2niix<\/a>\u00a0(jo and\u00a0jq\u00a0can be installed from homebrew). The script assumes that the Dicom folder with subjects needed to be converted exists. Each code snippet is part of the larger script.\u00a0<\/span><\/p>\n<p><span style=\"font-weight: 400;\"><a id=\"auto1\"><\/a><strong>Step 1.<\/strong>\u00a0To begin, we need to define our paths and create the Nifti directory. These paths\u00a0<\/span><b>need to be changed<\/b><span style=\"font-weight: 400;\">\u00a0according to what your paths are. These path variables are important to remember because these path variables are called throughout the script. (i.e. the variable\u00a0niidir\u00a0is defined as the path: \/Users\/franklinfeingold\/Desktop\/NKI_script\/Nifti)<\/span><\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">#!\/bin\/bash<\/span>\r\n\r\nset -e\u00a0\r\n<span style=\"color: #9f9e9e; font-style: italic;\">####Defining pathways<\/span>\r\ntoplvl=\/Users\/franklinfeingold\/Desktop\/NKI_script\r\ndcmdir=\/Users\/franklinfeingold\/Desktop\/NKI_script\/Dicom\r\ndcm2niidir=\/Users\/franklinfeingold\/Desktop\/dcm2niix_3-Jan-2018_mac\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#Create nifti directory<\/span>\r\nmkdir ${toplvl}\/Nifti\r\nniidir=${toplvl}\/Nifti<\/pre>\n<\/div>\n<p><span style=\"font-weight: 400;\">Then we can generate the dataset_description.json file.<\/span><\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">###Create dataset_description.json<\/span>\r\njo -p \"Name\"=\"NKI-Rockland Sample - Multiband Imaging Test-Retest Pilot Dataset\" \"BIDSVersion\"=\"1.0.2\" &gt;&gt; ${niidir}\/dataset_description.json<\/pre>\n<\/div>\n<p><span style=\"font-weight: 400;\"><a id=\"auto2\"><\/a><strong>Step 2.<\/strong>\u00a0To begin the workflow, the loop prints out the subject currently being processed and creates the session and\u00a0anat\u00a0folder within the subject folder. Then we convert with dcm2niix the anatomical\u00a0dicoms\u00a0into the\u00a0nifti\u00a0and json\u00a0file,\u00a0and output them in the subject folder within the Nifti folder (output pictured below). Please note that the converter input is the\u00a0anat\u00a0folder within the subjects Dicom folder.<\/span><\/p>\n<p>The for loop can iterate through every subject defined in the Dicom directory. For this walkthrough, we are only running through participant 2475376. One may add participant 3893245 when comfortable with the workflow. A participant will go through the entire workflow before the next one begins.<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">####Anatomical Organization####<\/span>\r\nfor subj in 2475376; do\r\n\techo \"Processing subject $subj\"\r\n\r\n<span style=\"color: #9f9e9e; font-style: italic;\">###Create structure<\/span>\r\nmkdir -p ${niidir}\/sub-${subj}\/ses-1\/anat\r\n\r\n<span style=\"color: #9f9e9e; font-style: italic;\">###Convert dcm to nii\r\n#Only convert the Dicom folder anat<\/span>\r\nfor direcs in anat; do\r\n${dcm2niidir}\/dcm2niix -o ${niidir}\/sub-${subj} -f ${subj}_%f_%p ${dcmdir}\/${subj}\/${direcs}\r\ndone\r\n<\/pre>\n<\/div>\n<p><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/02\/Script_anat-converted-raw.png\"><img loading=\"lazy\" decoding=\"async\" class=\" wp-image-435 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/02\/Script_anat-converted-raw.png\" alt=\"Script_anat converted raw\" width=\"270\" height=\"135\" \/><\/a><\/p>\n<p><span style=\"font-weight: 400;\">We changed the directory to where the converted\u00a0nifti\u00a0images are. In that directory, we can more easily change the filenames for the\u00a0anat\u00a0nii and json files.<\/span><\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">#Changing directory into the subject folder<\/span>\r\ncd ${niidir}\/sub-${subj}\r\n<\/pre>\n<\/div>\n<p><a id=\"auto3\"><\/a><span style=\"font-weight: 400;\"><strong>Step 3.<\/strong>\u00a0Now we can rename the\u00a0anat\u00a0files, following the same rule applied in\u00a0<a href=\"http:\/\/reproducibility.stanford.edu\/bids-tutorial-series-part-1a\/#man6\">step 6<\/a>\u00a0of part A. This code snippet will capture the number of\u00a0anat\u00a0files needed to be changed, go through each\u00a0anat\u00a0file and rename it to the valid BIDS filename.<\/span><\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">###Change filenames\r\n##Rename anat files\r\n#Example filename: 2475376_anat_MPRAGE\r\n#BIDS filename: sub-2475376_ses-1_T1w\r\n#Capture the number of anat files to change<\/span>\r\nanatfiles=$(ls -1 *MPRAGE* | wc -l)\r\nfor ((i=1;i&lt;=${anatfiles};i++)); do\r\nAnat=$(ls *MPRAGE*) <span style=\"color: #9f9e9e; font-style: italic;\">#This is to refresh the Anat variable, if this is not in the loop, each iteration a new \"No such file or directory error\", this is because the filename was changed. <\/span>\r\ntempanat=$(ls -1 $Anat | sed '1q;d') <span style=\"color: #9f9e9e; font-style: italic;\">#Capture new file to change<\/span>\r\ntempanatext=\"${tempanat##*.}\"\r\ntempanatfile=\"${tempanat%.*}\"\r\nmv ${tempanatfile}.${tempanatext} sub-${subj}_ses-1_T1w.${tempanatext}\r\necho \"${tempanat} changed to sub-${subj}_ses-1_T1w.${tempanatext}\"\r\ndone \r\n<\/pre>\n<\/div>\n<p><a id=\"auto4\"><\/a><br \/>\n<span style=\"font-weight: 400;\"><strong>Step 4.<\/strong>\u00a0Next, we can organize the valid BIDS filenames into the ses-1\/anat folder. The complete file structure to this point is pictured below.<\/span><\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">###Organize files into folders<\/span>\r\nfor files in $(ls sub*); do \r\nOrgfile=\"${files%.*}\"\r\nOrgext=\"${files##*.}\"\r\nModality=$(echo $Orgfile | rev | cut -d '_' -f1 | rev)\r\nif [ $Modality == \"T1w\" ]; then\r\n\tmv ${Orgfile}.${Orgext} ses-1\/anat\r\nelse\r\n:\r\nfi \r\ndone\r\n<\/pre>\n<\/div>\n<p><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/02\/Script_anat-organized.png\"><img loading=\"lazy\" decoding=\"async\" class=\"size-full wp-image-436 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/02\/Script_anat-organized.png\" alt=\"Script_anat organized\" width=\"296\" height=\"134\" \/><\/a><\/p>\n<p><span style=\"font-weight: 400;\">We have completed organizing the\u00a0anat\u00a0files. One can try\u00a0<a href=\"http:\/\/bids-standard.github.io\/bids-validator\/\">confirming<\/a>\u00a0this is a validated BIDS dataset at this point. Once the validation is confirmed, we are ready to organize the diffusion files.<\/span><\/p>\n<p><a id=\"auto5\"><\/a><br \/>\n<span style=\"font-weight: 400;\"><strong>Step 5.<\/strong>\u00a0To begin organizing the diffusion scans, we will generate the folder structure by creating a\u00a0dwi\u00a0folder within ses-1 and ses-2. Then we can convert the Dicom DTI folders within session1 and session2 and output the nii and json files to the participants Nifti folder. The output and current file structure can be seen below. \u00a0<\/span><\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">####Diffusion Organization####\r\n#Create subject folder <\/span>\r\nmkdir -p ${niidir}\/sub-${subj}\/{ses-1,ses-2}\/dwi<\/pre>\n<\/div>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">###Convert dcm to nii\r\n#Converting the two diffusion Dicom directories<\/span>\r\nfor direcs in session1 session2; do\r\n${dcm2niidir}\/dcm2niix -o ${niidir}\/sub-${subj} -f ${subj}_${direcs}_%p ${dcmdir}\/${subj}\/${direcs}\/DTI*\r\ndone\r\n<\/pre>\n<\/div>\n<p><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/02\/Script_Diff-raw-convert-with-anat-organized.png\"><img loading=\"lazy\" decoding=\"async\" class=\"wp-image-438 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/02\/Script_Diff-raw-convert-with-anat-organized.png\" alt=\"Script_Diff raw convert with anat organized\" width=\"223\" height=\"238\" \/><\/a><\/p>\n<p><span style=\"font-weight: 400;\">Next, we change the directory into the participants Nifti folder, where the converted nii and json files are.<\/span><\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">#Changing directory into the subject folder<\/span>\r\ncd ${niidir}\/sub-${subj}\r\n<\/pre>\n<\/div>\n<p><span style=\"font-weight: 400;\"><a id=\"auto6\"><\/a><strong>Step 6.<\/strong>\u00a0Now we can rename the diffusion nii and json files, similar to\u00a0<a href=\"http:\/\/reproducibility.stanford.edu\/bids-tutorial-series-part-1a\/#man9\">step 9<\/a>\u00a0in part A. The original filename and BIDS filename are printed out.<\/span><\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">#change dwi\r\n#Example filename: 2475376_session2_DIFF_137_AP_RR\r\n#BIDS filename: sub-2475376_ses-2_dwi\r\n#difffiles will capture how many filenames to change<\/span>\r\ndifffiles=$(ls -1 *DIFF* | wc -l)\r\nfor ((i=1;i&lt;=${difffiles};i++));\r\ndo\r\n\tDiff=$(ls *DIFF*) <span style=\"color: #9f9e9e; font-style: italic;\">#This is to refresh the diff variable, same as the cases above. <\/span>\r\n\ttempdiff=$(ls -1 $Diff | sed '1q;d')\r\n\ttempdiffext=\"${tempdiff##*.}\"\r\n\ttempdifffile=\"${tempdiff%.*}\"\r\n\tSessionnum=$(echo $tempdifffile | cut -d '_' -f2)\r\n\tDifflast=$(echo \"${Sessionnum: -1}\")\r\n\tif [ $Difflast == 2 ]; then \r\n\tses=2\r\n\telse\r\n\tses=1\r\n\tfi\r\n\tmv ${tempdifffile}.${tempdiffext} sub-${subj}_ses-${ses}_dwi.${tempdiffext}\r\n\techo \"$tempdiff changed to sub-${subj}_ses-${ses}_dwi.${tempdiffext}\"\r\ndone\r\n<\/pre>\n<\/div>\n<p><span style=\"font-weight: 400;\"><a id=\"auto7\"><\/a><strong>Step 7.<\/strong>\u00a0After the filenames have been renamed, we can organize the files into their correct directories. The filenames and structure are visualized below.<\/span><\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">###Organize files into folders<\/span>\r\nfor files in $(ls sub*); do \r\nOrgfile=\"${files%.*}\"\r\nOrgext=\"${files##*.}\"\r\nModality=$(echo $Orgfile | rev | cut -d '_' -f1 | rev)\r\nSessionnum=$(echo $Orgfile | cut -d '_' -f2)\r\nDifflast=$(echo \"${Sessionnum: -1}\")\r\nif [[ $Modality == \"dwi\" &amp;&amp; $Difflast == 2 ]]; then\r\n\tmv ${Orgfile}.${Orgext} ses-2\/dwi\r\nelse\r\nif [[ $Modality == \"dwi\" &amp;&amp; $Difflast == 1 ]]; then\r\n\tmv ${Orgfile}.${Orgext} ses-1\/dwi\r\nfi \r\nfi\r\ndone\r\n<\/pre>\n<\/div>\n<p><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/02\/Script_Diff-organized-good-filename.png\"><img loading=\"lazy\" decoding=\"async\" class=\"wp-image-437 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/02\/Script_Diff-organized-good-filename.png\" alt=\"Script_Diff organized good filename\" width=\"245\" height=\"273\" \/><\/a><\/p>\n<p><span style=\"font-weight: 400;\">We have completed the organization of the diffusion scans. One may confirm this is still a valid BIDS dataset through\u00a0<a href=\"http:\/\/bids-standard.github.io\/bids-validator\/\">validation<\/a>. Once validated, we are ready to organize the functional scans.<\/span><\/p>\n<p><span style=\"font-weight: 400;\"><a id=\"auto8\"><\/a><strong>Step 8.<\/strong>\u00a0To begin organizing the functional scans, we will create the functional folder structure by adding a func folder to both ses-1 and ses-2. With the folders created, we can now convert the functional\u00a0dicom\u00a0files to\u00a0nifti\u00a0and json files. To do this, we converted the folders that comprise the functional\u00a0dicoms\u00a0and output the nii and json files to within the participant&#8217;s folders in the Nifti directory. The folder names are contained within the for\u00a0loop. The output and folder structure is visualized below. \u00a0\u00a0<\/span><\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">####Functional Organization####\r\n#Create subject folder<\/span>\r\nmkdir -p ${niidir}\/sub-${subj}\/{ses-1,ses-2}\/func<\/pre>\n<\/div>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">###Convert dcm to nii<\/span>\r\nfor direcs in TfMRI_breathHold_1400 TfMRI_eyeMovementCalibration_1400 TfMRI_eyeMovementCalibration_645 TfMRI_visualCheckerboard_1400 TfMRI_visualCheckerboard_645 session1 session2; do\r\nif [[ $direcs == \"session1\" || $direcs == \"session2\" ]]; then\r\nfor rest in RfMRI_mx_645 RfMRI_mx_1400 RfMRI_std_2500; do \r\n${dcm2niidir}\/dcm2niix -o ${niidir}\/sub-${subj} -f ${subj}_${direcs}_%p ${dcmdir}\/${subj}\/${direcs}\/${rest}\r\ndone\r\nelse\r\n${dcm2niidir}\/dcm2niix -o ${niidir}\/sub-${subj} -f ${subj}_${direcs}_%p ${dcmdir}\/${subj}\/${direcs}\r\nfi\r\ndone\r\n<\/pre>\n<\/div>\n<p><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/02\/Script_func-dcm2niix-output-with-structure.png\"><img loading=\"lazy\" decoding=\"async\" class=\" wp-image-441 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/02\/Script_func-dcm2niix-output-with-structure.png\" alt=\"Script_func dcm2niix output with structure\" width=\"342\" height=\"498\" \/><\/a><\/p>\n<p><span style=\"font-weight: 400;\">We changed the directory\u00a0into\u00a0where the converted nii and json files are, in the participant&#8217;s Nifti folder. \u00a0<\/span><\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">#Changing directory into the subject folder<\/span>\r\ncd ${niidir}\/sub-${subj}\r\n<\/pre>\n<\/div>\n<p><span style=\"font-weight: 400;\"><a id=\"auto9\"><\/a><strong>Step 9.<\/strong>\u00a0Now we can rename the func files, similar to\u00a0<a href=\"http:\/\/reproducibility.stanford.edu\/bids-tutorial-series-part-1a\/#man12\">step 12<\/a>\u00a0in part A. To do this, we changed filenames task by task. The order we renamed in: Checkerboard, eye movement, breath hold, and rest. Note that the rest scans still span across 2 sessions.<\/span><br \/>\nCheckerboard files renamed<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">##Rename func files\r\n#Break the func down into each task\r\n#Checkerboard task\r\n#Example filename: 2475376_TfMRI_visualCheckerboard_645_CHECKERBOARD_645_RR\r\n#BIDS filename: sub-2475376_ses-1_task-Checkerboard_acq-TR645_bold\r\n#Capture the number of checkerboard files to change<\/span>\r\ncheckerfiles=$(ls -1 *CHECKERBOARD* | wc -l)\r\nfor ((i=1;i&lt;=${checkerfiles};i++)); do\r\nChecker=$(ls *CHECKERBOARD*) <span style=\"color: #9f9e9e; font-style: italic;\">#This is to refresh the Checker variable, same as the Anat case<\/span>\r\ntempcheck=$(ls -1 $Checker | sed '1q;d') <span style=\"color: #9f9e9e; font-style: italic;\">#Capture new file to change<\/span>\r\ntempcheckext=\"${tempcheck##*.}\"\r\ntempcheckfile=\"${tempcheck%.*}\"\r\nTR=$(echo $tempcheck | cut -d '_' -f4) <span style=\"color: #9f9e9e; font-style: italic;\">#f4 is the fourth field delineated by _ to capture the acquisition TR from the filename<\/span>\r\nmv ${tempcheckfile}.${tempcheckext} sub-${subj}_ses-1_task-Checkerboard_acq-TR${TR}_bold.${tempcheckext}\r\necho \"${tempcheckfile}.${tempcheckext} changed to sub-${subj}_ses-1_task-Checkerboard_acq-TR${TR}_bold.${tempcheckext}\"\r\ndone\r\n<\/pre>\n<\/div>\n<p>Eye movement calibration files renamed<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">#Eye Movement\r\n#Example filename: 2475376_TfMRI_eyeMovementCalibration_645_EYE_MOVEMENT_645_RR\r\n#BIDS filename: sub-2475376_ses-1_task-eyemovement_acq-TR645_bold\r\n#Capture the number of eyemovement files to change<\/span>\r\neyefiles=$(ls -1 *EYE* | wc -l)\r\nfor ((i=1;i&lt;=${eyefiles};i++)); do\r\nEye=$(ls *EYE*)\r\ntempeye=$(ls -1 $Eye | sed '1q;d')\r\ntempeyeext=\"${tempeye##*.}\"\r\ntempeyefile=\"${tempeye%.*}\"\r\nTR=$(echo $tempeye | cut -d '_' -f4) <span style=\"color: #9f9e9e; font-style: italic;\">#f4 is the fourth field delineated by _ to capture the acquisition TR from the filename<\/span>\r\nmv ${tempeyefile}.${tempeyeext} sub-${subj}_ses-1_task-eyemovement_acq-TR${TR}_bold.${tempeyeext}\r\necho \"${tempeyefile}.${tempeyeext} changed to sub-${subj}_ses-1_task-eyemovement_acq-TR${TR}_bold.${tempeyeext}\"\r\ndone\r\n<\/pre>\n<\/div>\n<p>Breath holding files renamed<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">#Breath Hold\r\n#Example filename: 2475376_TfMRI_breathHold_1400_BREATH_HOLD_1400_RR\r\n#BIDS filename: sub-2475376_ses-1_task-breathhold_acq-TR1400_bold\r\n#Capture the number of breath hold files to change<\/span>\r\nbreathfiles=$(ls -1 *BREATH* | wc -l)\r\nfor ((i=1;i&lt;=${breathfiles};i++)); do\r\nBreath=$(ls *BREATH*)\r\ntempbreath=$(ls -1 $Breath | sed '1q;d')\r\ntempbreathext=\"${tempbreath##*.}\"\r\ntempbreathfile=\"${tempbreath%.*}\"\r\nTR=$(echo $tempbreath | cut -d '_' -f4) <span style=\"color: #9f9e9e; font-style: italic;\">#f4 is the fourth field delineated by _ to capture the acquisition TR from the filename<\/span>\r\nmv ${tempbreathfile}.${tempbreathext} sub-${subj}_ses-1_task-breathhold_acq-TR${TR}_bold.${tempbreathext}\r\necho \"${tempbreathfile}.${tempbreathext} changed to sub-${subj}_ses-1_task-breathhold_acq-TR${TR}_bold.${tempbreathext}\"\r\ndone\r\n<\/pre>\n<\/div>\n<p>Rest files renamed<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">#Rest\r\n#Example filename: 2475376_session1_REST_645_RR\r\n#BIDS filename: sub-2475376_ses-1_task-rest_acq-TR645_bold\r\n#Breakdown rest scans into each TR<\/span>\r\nfor TR in 645 1400 CAP; do \r\nfor corrun in $(ls *REST_${TR}*); do\r\ncorrunfile=\"${corrun%.*}\"\r\ncorrunfileext=\"${corrun##*.}\"\r\nSessionnum=$(echo $corrunfile | cut -d '_' -f2)\r\nsesnum=$(echo \"${Sessionnum: -1}\") \r\nif [ $sesnum == 2 ]; then \r\nses=2\r\nelse\r\n\tses=1\r\nfi\r\nif [ $TR == \"CAP\" ]; then\r\n\tTR=2500\r\nelse\r\n\t:\r\nfi\r\nmv ${corrunfile}.${corrunfileext} sub-${subj}_ses-${ses}_task-rest_acq-TR${TR}_bold.${corrunfileext}\r\necho \"${corrun} changed to sub-${subj}_ses-${ses}_task-rest_acq-TR${TR}_bold.${corrunfileext}\"\r\ndone\r\ndone\r\n<\/pre>\n<\/div>\n<p><span style=\"font-weight: 400;\">Next, we will organize the files into the correct directories. We have shown below, the filenames and organization.<\/span><\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">\r\n###Organize files into folders<\/span>\r\nfor files in $(ls sub*); do \r\nOrgfile=\"${files%.*}\"\r\nOrgext=\"${files##*.}\"\r\nModality=$(echo $Orgfile | rev | cut -d '_' -f1 | rev)\r\nSessionnum=$(echo $Orgfile | cut -d '_' -f2)\r\nDifflast=$(echo \"${Sessionnum: -1}\")\r\nif [[ $Modality == \"bold\" &amp;&amp; $Difflast == 2 ]]; then\r\n\tmv ${Orgfile}.${Orgext} ses-2\/func\r\nelse\r\nif [[ $Modality == \"bold\" &amp;&amp; $Difflast == 1 ]]; then\r\n\tmv ${Orgfile}.${Orgext} ses-1\/func\r\nfi \r\nfi\r\ndone\r\n<\/pre>\n<\/div>\n<p><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/02\/Script_func-rename-and-organized-script.png\"><img loading=\"lazy\" decoding=\"async\" class=\" wp-image-442 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/02\/Script_func-rename-and-organized-script.png\" alt=\"Script_func rename and organized script\" width=\"332\" height=\"539\" \/><\/a><\/p>\n<p><span style=\"font-weight: 400;\"><a id=\"auto10\"><\/a><strong>Step 10.\u00a0<\/strong>Now we need to create the\u00a0<a href=\"http:\/\/bids.neuroimaging.io\/bids_spec1.0.2.pdf#page=18\">task event\u00a0tsv<\/a>\u00a0files for each of our tasks. The task designs can be found on the\u00a0<a href=\"http:\/\/fcon_1000.projects.nitrc.org\/indi\/pro\/eNKI_RS_TRT\/FrontPage.html\">NKI webpage<\/a>. To determine the Checkerboard events file, one will look at the\u00a0<a href=\"http:\/\/fcon_1000.projects.nitrc.org\/indi\/pro\/eNKI_RS_TRT\/CheckboardParadigm.txt\">Checkerboard task design<\/a>. Here we generated the Checkerboard TR=645 event file.<\/span><\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">###Create events tsv files\r\n##Create Checkerboard event file\r\n#Checkerboard acq-TR645\r\n#Generate Checkerboard acq-TR645 event tsv if it doesn't exist<\/span>\r\nif [ -e ${niidir}\/task-Checkerboard_acq-TR645_events.tsv ]; then\r\n\t:\r\nelse\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#Create events file with headers<\/span>\r\necho -e onset'\\t'duration'\\t'trial_type &gt; ${niidir}\/task-Checkerboard_acq-TR645_events.tsv\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#This file will be placed at the level where dataset_description file and subject folders are.\r\n#The reason for this file location is because the event design is consistent across subjects.\r\n#If the event design is consistent across subjects, we can put it at this level. This is because of the Inheritance principle.<\/span>\r\n\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#Create onset column<\/span>\r\necho -e 0'\\n'20'\\n'40'\\n'60'\\n'80'\\n'100 &gt; ${niidir}\/temponset.txt \r\n\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#Create duration column<\/span>\r\necho -e 20'\\n'20'\\n'20'\\n'20'\\n'20'\\n'20 &gt; ${niidir}\/tempdur.txt\r\n\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#Create trial_type column<\/span>\r\necho -e Fixation'\\n'Checkerboard'\\n'Fixation'\\n'Checkerboard'\\n'Fixation'\\n'Checkerboard &gt; ${niidir}\/temptrial.txt\r\n\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#Paste onset and duration into events file<\/span>\r\npaste -d '\\t' ${niidir}\/temponset.txt ${niidir}\/tempdur.txt ${niidir}\/temptrial.txt &gt;&gt; ${niidir}\/task-Checkerboard_acq-TR645_events.tsv\r\n\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#remove temp files<\/span>\r\nrm ${niidir}\/tempdur.txt ${niidir}\/temponset.txt ${niidir}\/temptrial.txt\r\nfi\r\n<\/pre>\n<\/div>\n<p><span style=\"font-weight: 400;\">Since both acquisitions have the same task design, we can simply copy the events file, but renamed.<\/span><\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">##Checkerboard acq-TR1400\r\n#Generate Checkerboard acq-TR1400 event tsv if it doesn't exist<\/span>\r\nif [ -e ${niidir}\/task-Checkerboard_acq-TR1400_events.tsv ]; then\r\n\t:\r\nelse\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#Because the checkerboard design is consistent across the different TRs\r\n#We can copy the above event file and change the name<\/span>\r\ncp ${niidir}\/task-Checkerboard_acq-TR645_events.tsv ${niidir}\/task-Checkerboard_acq-TR1400_events.tsv\r\nfi\r\n<\/pre>\n<\/div>\n<p><span style=\"font-weight: 400;\">Now, we will generate the event file for eye movement. We downloaded\u00a0the\u00a0<a href=\"http:\/\/fcon_1000.projects.nitrc.org\/indi\/pro\/eNKI_RS_TRT\/EyeMovementCalibParadigm.txt\">eye\u00a0movement paradigm<\/a>. The path that we set for eye movement paradigm was: \/Users\/franklinfeingold\/Desktop\/EyemovementCalibParadigm.txt .\u00a0This\u00a0<strong>needs to be edited in the script<\/strong>\u00a0to where one placed their paradigm file.<\/span><\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">##Eye movement acq-TR645\r\n#Generate eye movement acq-TR645 event tsv if it doesn't exist<\/span>\r\nif [ -e ${niidir}\/task-eyemovement_acq-TR645_events.tsv ]; then\r\n\t:\r\nelse\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#Create events file with headers<\/span>\r\necho -e onset'\\t'duration &gt; ${niidir}\/task-eyemovement_acq-TR645_events.tsv\r\n\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#Creating duration first to help generate the onset file\r\n#Create temponset file<\/span>\r\nonlength=$(cat \/Users\/franklinfeingold\/Desktop\/EyemovementCalibParadigm.txt | wc -l)\r\nfor ((i=2;i&lt;=$((onlength-1));i++)); do \r\nontime=$(cat \/Users\/franklinfeingold\/Desktop\/EyemovementCalibParadigm.txt | sed \"${i}q;d\" | cut -d ',' -f1) \r\necho -e ${ontime} &gt;&gt; ${niidir}\/temponset.txt\r\ndone\r\ncp ${niidir}\/temponset.txt ${niidir}\/temponset2.txt\r\necho 108 &gt;&gt; ${niidir}\/temponset2.txt <span style=\"color: #9f9e9e; font-style: italic;\">#Eye calibration length is 108 seconds\r\n\r\n#Generate tempdur file<\/span>\r\ndurlength=$(cat ${niidir}\/temponset2.txt | wc -l)\r\nfor ((i=1;i&lt;=$((durlength-1));i++)); do \r\ndurtime=$(cat ${niidir}\/temponset2.txt | sed $((i+1))\"q;d\") \r\nonsettime=$(cat ${niidir}\/temponset2.txt | sed \"${i}q;d\") \r\nnewdur=$(echo \"$durtime - $onsettime\"|bc) \r\necho \"${newdur}\" &gt;&gt; ${niidir}\/tempdur.txt\r\ndone\r\n\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#Paste onset and duration into events file<\/span>\r\npaste -d '\\t' ${niidir}\/temponset.txt ${niidir}\/tempdur.txt &gt;&gt; ${niidir}\/task-eyemovement_acq-TR645_events.tsv\r\n\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#rm temp files<\/span>\r\nrm ${niidir}\/tempdur.txt ${niidir}\/temponset.txt ${niidir}\/temponset2.txt \r\nfi\r\n<\/pre>\n<\/div>\n<p><span style=\"font-weight: 400;\">Since the task design is consistent across different TR, we can simply copy the task design, but with a different filename.<\/span><\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">##Eye movement acq-TR1400\r\n#Generate eye movement acq-TR1400 event tsv if it doesn't exist<\/span>\r\nif [ -e ${niidir}\/task-eyemovement_acq-TR1400_events.tsv ]; then\r\n\t:\r\nelse\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#Because the eye movement calibration is consistent across the different TRs\r\n#We can copy the above event file and change the name<\/span>\r\ncp ${niidir}\/task-eyemovement_acq-TR645_events.tsv ${niidir}\/task-eyemovement_acq-TR1400_events.tsv\r\nfi\r\n<\/pre>\n<\/div>\n<p><span style=\"font-weight: 400;\">Lastly, we will create the event file for the breath hold task by looking at\u00a0the\u00a0<a href=\"http:\/\/fcon_1000.projects.nitrc.org\/indi\/pro\/eNKI_RS_TRT\/BreathHoldParadigm.txt\">breath\u00a0hold design file<\/a>.<\/span><\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">##Breath hold acq-TR1400\r\n#Generate breath hold acq-TR1400 event tsv if it doesn't exist<\/span>\r\nif [ -e ${niidir}\/task-breathhold_acq-TR1400_events.tsv ]; then\r\n\t:\r\nelse\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#Create events file with headers<\/span>\r\necho -e onset'\\t'duration &gt; ${niidir}\/task-breathhold_acq-TR1400_events.tsv\r\n\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#Create duration column\r\n#Creating duration first to help generate the onset file<\/span>\r\ndur1=10\r\ndur2=2\r\ndur3=3\r\n\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#Create tempdur file<\/span>\r\nfor ((i=1;i&lt;=7;i++)); do \r\necho -e ${dur1}'\\n'${dur2}'\\n'${dur2}'\\n'${dur2}'\\n'${dur2}'\\n'${dur3}'\\n'${dur3}'\\n'${dur3}'\\n'${dur3}'\\n'${dur3}'\\n'${dur3} &gt;&gt; ${niidir}\/tempdur.txt\r\ndone\r\n\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#Create onset column\r\n#Initialize temponset file<\/span>\r\necho -e 0 &gt; ${niidir}\/temponset.txt\r\n\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#Generate temponset file<\/span>\r\ndurlength=$(cat ${niidir}\/tempdur.txt | wc -l)\r\nfor ((i=1;i&lt;=$((durlength-1));i++)); do \r\ndurtime=$(cat ${niidir}\/tempdur.txt | sed \"${i}q;d\") \r\nonsettime=$(cat ${niidir}\/temponset.txt | sed \"${i}q;d\") \r\nnewonset=$((durtime+onsettime)) \r\necho ${newonset} &gt;&gt; ${niidir}\/temponset.txt\r\ndone\r\n\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#Paste onset and duration into events file<\/span>\r\npaste -d '\\t' ${niidir}\/temponset.txt ${niidir}\/tempdur.txt &gt;&gt; ${niidir}\/task-breathhold_acq-TR1400_events.tsv\r\n\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#rm temp files<\/span>\r\nrm ${niidir}\/tempdur.txt ${niidir}\/temponset.txt \r\nfi\r\n<\/pre>\n<\/div>\n<p><span style=\"font-weight: 400;\">Pictured below is the current file structure.<\/span><\/p>\n<p><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/02\/Script_Full-structure-247.png\"><img loading=\"lazy\" decoding=\"async\" class=\" wp-image-440 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/02\/Script_Full-structure-247.png\" alt=\"Script_Full structure 247\" width=\"366\" height=\"663\" \/><\/a><\/p>\n<p><span style=\"font-weight: 400;\"><a id=\"auto11\"><\/a><strong>Step 11.<\/strong>\u00a0At this point, one may try\u00a0<a href=\"http:\/\/bids-standard.github.io\/bids-validator\/\">validating<\/a>. However, one will receive the\u00a0<a href=\"http:\/\/reproducibility.stanford.edu\/bids-tutorial-series-part-1a\/#man14\">same error message<\/a>\u00a0from part A regarding defining TaskName in the\u00a0<a href=\"http:\/\/bids.neuroimaging.io\/bids_spec1.0.2.pdf#page=14\">task json files<\/a>. The slice timing for multiband imaging was corrected in the version of dcm2niix implemented in the script.\u00a0<\/span><br \/>\n<a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/02\/Script_error-message-script_taskname.png\"><img loading=\"lazy\" decoding=\"async\" class=\"wp-image-439 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/02\/Script_error-message-script_taskname.png\" alt=\"Script_error message script_taskname\" width=\"453\" height=\"124\" \/><\/a><br \/>\n<span style=\"font-weight: 400;\">To correct this error, we will confirm that each task json file has the required fields:\u00a0RepetitionTime,\u00a0VolumeTiming\u00a0or SliceTiming, and TaskName. This code snippet will evaluate if RepetitionTime\u00a0exists,\u00a0if SliceTiming (or\u00a0VolumeTiming) exist and the timings are all less than the\u00a0RepetitionTime, and if TaskName is defined. In addition, if TaskName is not defined, TaskName will be added to the json file with TaskName being the task label in the filename.<\/span><\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #9f9e9e; font-style: italic;\">###Check func json for required fields\r\n#Required fields for func: 'RepetitionTime','VolumeTiming' or 'SliceTiming', and 'TaskName'\r\n#capture all jsons to test<\/span>\r\nfor sessnum in ses-1 ses-2; do\r\ncd ${niidir}\/sub-${subj}\/${sessnum}\/func <span style=\"color: #9f9e9e; font-style: italic;\">#Go into the func folder<\/span>\r\nfor funcjson in $(ls *.json); do \r\n\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#Repeition Time exist?<\/span>\r\nrepeatexist=$(cat ${funcjson} | jq '.RepetitionTime')\r\nif [[ ${repeatexist} == \"null\" ]]; then   \r\n\techo \"${funcjson} doesn't have RepetitionTime defined\"\r\nelse\r\necho \"${funcjson} has RepetitionTime defined\"\r\nfi\r\n\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#VolumeTiming or SliceTiming exist?\r\n#Constraint SliceTiming can't be great than TR<\/span>\r\nvolexist=$(cat ${funcjson} | jq '.VolumeTiming')\r\nsliceexist=$(cat ${funcjson} | jq '.SliceTiming')\r\nif [[ ${volexist} == \"null\" &amp;&amp; ${sliceexist} == \"null\" ]]; then\r\necho \"${funcjson} doesn't have VolumeTiming or SliceTiming defined\"\r\nelse\r\nif [[ ${volexist} == \"null\" ]]; then\r\necho \"${funcjson} has SliceTiming defined\"\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#Check SliceTiming is less than TR<\/span>\r\nsliceTR=$(cat ${funcjson} | jq '.SliceTiming[] | select(.&gt;=\"$repeatexist\")')\r\nif [ -z ${sliceTR} ]; then\r\necho \"All SliceTiming is less than TR\" <span style=\"color: #9f9e9e; font-style: italic;\">#The slice timing was corrected in the newer dcm2niix version called through command line<\/span>\r\nelse\r\necho \"SliceTiming error\"\r\nfi\r\nelse\r\necho \"${funcjson} has VolumeTiming defined\"\r\nfi\r\nfi\r\n\r\n<span style=\"color: #9f9e9e; font-style: italic;\">#Does TaskName exist?<\/span>\r\ntaskexist=$(cat ${funcjson} | jq '.TaskName')\r\nif [ \"$taskexist\" == \"null\" ]; then\r\njsonname=\"${funcjson%.*}\"\r\ntaskfield=$(echo $jsonname | cut -d '_' -f2 | cut -d '-' -f2)\r\njq '. |= . + {\"TaskName\":\"'${taskfield}'\"}' ${funcjson} &gt; tasknameadd.json\r\nrm ${funcjson}\r\nmv tasknameadd.json ${funcjson}\r\necho \"TaskName was added to ${jsonname} and matches the tasklabel in the filename\"\r\nelse\r\nTaskquotevalue=$(jq '.TaskName' ${funcjson})\r\nTaskvalue=$(echo $Taskquotevalue | cut -d '\"' -f2)\t\r\njsonname=\"${funcjson%.*}\"\r\ntaskfield=$(echo $jsonname | cut -d '_' -f2 | cut -d '-' -f2)\r\nif [ $Taskvalue == $taskfield ]; then\r\necho \"TaskName is present and matches the tasklabel in the filename\"\r\nelse\r\necho \"TaskName and tasklabel do not match\"\r\nfi\r\nfi\r\n\r\ndone\r\ndone\r\n<\/pre>\n<\/div>\n<p><span style=\"font-weight: 400;\"><a id=\"auto12\"><\/a><strong>Step 12.<\/strong>\u00a0Now if we try to\u00a0<a href=\"http:\/\/bids-standard.github.io\/bids-validator\/\">validate<\/a>, we find that this dataset is a valid BIDS dataset! To capture both subjects, one can change the subj for\u00a0loop\u00a0at the top of the script to replace participant 3893245 for 2475376 in the loop. After running participant 3893245 through the workflow, we find the\u00a0<a href=\"http:\/\/reproducibility.stanford.edu\/bids-tutorial-series-part-1a\/#man15\">same warnings<\/a>\u00a0as the part A curated dataset; the checkerboard scans across subjects have different time dimensions and the\u00a0dwi\u00a0may be missing scans because there is only 1 diffusion scan for participant 3893245 and 2 diffusion scans for participant 2475376.\u00a0<\/span><span style=\"font-weight: 400;\">Note: Do not have both participants in the for loop if one has already been run and organized, this will cause an error.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">This first tutorial part illustrated how to convert DICOMs from the NKI Test-Retest dataset to a validated BIDS dataset. We illustrated doing it <a href=\"http:\/\/reproducibility.stanford.edu\/bids-tutorial-series-part-1a\/\">A. manually<\/a> and B. an automated custom solution. The next tutorial will show how to complete this conversation using an off-the-shelf BIDS converter: HeuDiconv.<\/span><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Introduction Welcome to part 1B of the tutorial series \u201cGetting Started with BIDS\u201d. This tutorial will illustrate how one can automate the conversation of DICOMs into a valid BIDS dataset. This tutorial will follow the same workflow detailed in part 1A of this tutorial series. We will be using DICOMs from the\u00a0Nathan Kline Institute (NKI) [&hellip;]<\/p>\n","protected":false},"author":4,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"_exactmetrics_skip_tracking":false,"_exactmetrics_sitenote_active":false,"_exactmetrics_sitenote_note":"","_exactmetrics_sitenote_category":0,"footnotes":""},"categories":[6],"tags":[],"class_list":["post-529","post","type-post","status-publish","format-standard","hentry","category-blog"],"_links":{"self":[{"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/posts\/529","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/users\/4"}],"replies":[{"embeddable":true,"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/comments?post=529"}],"version-history":[{"count":9,"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/posts\/529\/revisions"}],"predecessor-version":[{"id":983,"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/posts\/529\/revisions\/983"}],"wp:attachment":[{"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/media?parent=529"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/categories?post=529"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/tags?post=529"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}
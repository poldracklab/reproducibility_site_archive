{"id":536,"date":"2018-05-17T02:00:07","date_gmt":"2018-05-17T02:00:07","guid":{"rendered":"http:\/\/reproducibility.stanford.edu\/?p=536"},"modified":"2021-03-26T21:47:38","modified_gmt":"2021-03-26T21:47:38","slug":"bids-tutorial-series-part-2a","status":"publish","type":"post","link":"https:\/\/reproducibility.stanford.edu\/bids-tutorial-series-part-2a\/","title":{"rendered":"BIDS Tutorial Series: HeuDiConv Walkthrough"},"content":{"rendered":"<p><strong>Introduction<\/strong><\/p>\n<p>Welcome back to the next tutorial in the tutorial series &#8220;Getting Started with BIDS&#8221;. In this tutorial, we will be utilizing an off-the-shelf solution called <a href=\"https:\/\/github.com\/nipy\/heudiconv\">HeuDiConv<\/a>. This tutorial will illustrate\u00a0a detailed step-by-step guide on how to use HeuDiConv. The guide will take one subject and iteratively add one session at a time until the dataset is organized and validated. This part will provide separate command line inputs to run HeuDiConv. We will be using DICOMs from the <a href=\"https:\/\/openneuro.org\/datasets\/ds000031\/versions\/00001\">MyConnectome\u00a0dataset<\/a>\u00a0found <a href=\"https:\/\/figshare.com\/articles\/MyConnectome_BIDS_tutorial2A\/6267503\">here<\/a> and following the\u00a0<a href=\"http:\/\/bids.neuroimaging.io\/bids_spec1.1.0.pdf\">BIDS Specification version 1.1.0<\/a>. <a href=\"http:\/\/nipy.org\/workshops\/2017-03-boston\/lectures\/bids-heudiconv\/#1\">Another tutorial<\/a> has described using HeuDiConv on a different dataset. The next part of this tutorial series will examine another off-the-shelf solution to consider using to convert your dataset into a validated BIDS dataset.<\/p>\n<p>For surfacing questions, we please ask if you may direct them to <a href=\"https:\/\/neurostars.org\/tag\/bids\">NeuroStars<\/a> with the \u201cbids\u201d tag. NeuroStars is an active platform with many BIDS experts.<\/p>\n<p>Table of Contents<\/p>\n<ol>\n<li><a href=\"#heuman1\">Setting up your environment<\/a><\/li>\n<li><a href=\"#heuman2\">Run HeuDiConv on ses-001 scans to get the dicominfo file<\/a><\/li>\n<li><a href=\"#heuman3\">Examine\u00a0ses-001 dicominfo file to generate heuristic.py<\/a><\/li>\n<li><a href=\"#heuman4\">Run HeuDiConv on ses-001 scans with heuristic.py and validate<\/a><\/li>\n<li><a href=\"#heuman5\">Run HeuDiConv on ses-005 scans to get the dicominfo file<\/a><\/li>\n<li><a href=\"#heuman6\">Examine ses-005 dicominfo file and update heuristic.py<\/a><\/li>\n<li><a href=\"#heuman7\">Run HeuDiConv on ses-005 scans with updated heuristic.py and validate<\/a><\/li>\n<li><a href=\"#heuman8\">Run HeuDiConv on ses-025 scans to get the dicominfo file<\/a><\/li>\n<li><a href=\"#heuman9\">Examine ses-025 dicominfo file and update heuristic.py<\/a><\/li>\n<li><a href=\"#heuman10\">Run HeuDiConv on ses-025 scans with updated heuristic.py and validate<\/a><\/li>\n<\/ol>\n<p><strong>2A. Guide to using HeuDiConv<\/strong><\/p>\n<p><strong><a id=\"heuman1\"><\/a>Step 1.<\/strong> To begin, we first need to initialize the environment. We will be utilizing <a href=\"https:\/\/www.docker.com\/get-docker\">Docker<\/a>\u00a0for running HeuDiConv. After one has gotten Docker, we can use the command line to download HeuDiConv. The command is shown below. Once that has downloaded, one may begin the conversation<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\">docker pull nipy\/heudiconv:latest<\/pre>\n<\/div>\n<p>We will be starting with converting ses-001 within sub-01.<\/p>\n<p><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/dicom_1struc-1.png\"><img loading=\"lazy\" decoding=\"async\" class=\" wp-image-673 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/dicom_1struc-1.png\" alt=\"dicom_1struc\" width=\"302\" height=\"299\" \/><\/a><\/p>\n<p><strong><a id=\"heuman2\"><\/a>Step 2.<\/strong>\u00a0We are ready to run HeuDiConv. The command syntax can be seen below. Let&#8217;s break down this syntax. The &#8216;docker run &#8211;rm -it&#8217; is calling docker. The &#8216;-v \/Users\/franklinfeingold\/Desktop\/HeuDiConv_walkthrough:\/base&#8217; is mounting this path and calling it base. This means that base can be used instead of the entire path. The &#8216;nipy\/heudiconv:latest&#8217; is calling the latest version of HeuDiConv. The -d is the dicom directory. Notice we started the path with \/base instead of the full path and subject and session are curly bracketed, this is because they are defined later in the call as -s for subject and -ss for session. The -o is where the .heudiconv directory will be, -f is for the heuristic file, and -c is the converter to use.<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\">docker run --rm -it -v \/Users\/franklinfeingold\/Desktop\/HeuDiConv_walkthrough:\/base nipy\/heudiconv:latest -d \/base\/Dicom\/sub-{subject}\/ses-{session}\/SCANS\/*\/DICOM\/*.dcm -o \/base\/Nifti\/ -f convertall -s 01 -ss 001 -c none --overwrite<\/pre>\n<\/div>\n<p>This command will output a hidden .heudiconv folder within the Nifti folder that contains a dicominfo .tsv file used to construct the heuristic file.<\/p>\n<p><strong><a id=\"heuman3\"><\/a>Step 3.<\/strong> Now copy the dicominfo\u00a0.tsv file out of the hidden .heudiconv folder. We temporarily placed this folder at the same level as Dicom and Nifti. This file is used to construct the heuristic.py file.<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\">cp \/Users\/franklinfeingold\/Desktop\/HeuDiConv_walkthrough\/Nifti\/.heudiconv\/01\/info\/dicominfo_ses-001.tsv \/Users\/franklinfeingold\/Desktop\/HeuDiConv_walkthrough<\/pre>\n<\/div>\n<p><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/Screen-Shot-2018-05-14-at-2.55.04-PM.png\"><img loading=\"lazy\" decoding=\"async\" class=\"wp-image-669 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/Screen-Shot-2018-05-14-at-2.55.04-PM.png\" alt=\"heudiconv_tsv_ses1\" width=\"361\" height=\"161\" \/><\/a><\/p>\n<p>We can open the dicominfo\u00a0file and evaluate the different columns. Some of the different columns are pictured below. This information will be used to create the heuristic.py file. The heuristic.py file is used to convert and organize the data. Here is <a href=\"http:\/\/nipy.org\/workshops\/2017-03-boston\/lectures\/bids-heudiconv\/#30\">an example<\/a>\u00a0of how a complete one may look. Our heuristic.py can be seen below. Once the heuristic file has been generated, one may delete the dicominfo .tsv file. Please place the heuristic.py file in a code folder within Nifti, pictured below.\u00a0<a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/dicominfo-anat-1.png\"><br \/>\n<\/a><\/p>\n<p><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/tsvfile_ses1.png\"><img loading=\"lazy\" decoding=\"async\" class=\"wp-image-670 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/tsvfile_ses1.png\" alt=\"tsvfile_ses1\" width=\"455\" height=\"290\" \/><\/a><\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\">import os\ndef create_key(template, outtype=('nii.gz',), annotation_classes=None):\n    if template is None or not template:\n        raise ValueError('Template must be a valid format string')\n    return template, outtype, annotation_classes\ndef infotodict(seqinfo):\n    \"\"\"Heuristic evaluator for determining which runs belong where\n    allowed template fields - follow python string module:\n    item: index within category\n    subject: participant id\n    seqitem: run number during scanning\n    subindex: sub index within group\n    \"\"\"\n    t1w = create_key('sub-{subject}\/{session}\/anat\/sub-{subject}_{session}_run-00{item:01d}_T1w')\n\n    info = {t1w: []}\n    \n    for idx, s in enumerate(seqinfo):\n        if (s.dim1 == 320) and (s.dim2 == 320) and ('t1_fl2d_tra' in s.protocol_name):\n            info[t1w].append(s.series_id)\n    return info\n<\/pre>\n<\/div>\n<p><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/struc_code_heuristic.png\"><img loading=\"lazy\" decoding=\"async\" class=\" wp-image-671 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/struc_code_heuristic.png\" alt=\"struc_code_heuristic\" width=\"379\" height=\"197\" \/><\/a><\/p>\n<p><strong><a id=\"heuman4\"><\/a>Step 4.<\/strong> Now that we have the heuristic.py script we can run HeuDiConv again, but changing -c from none to dcm2niix and adding -b. The call is seen below.<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\">docker run --rm -it -v \/Users\/franklinfeingold\/Desktop\/HeuDiConv_walkthrough:\/base nipy\/heudiconv:latest -d \/base\/Dicom\/sub-{subject}\/ses-{session}\/SCANS\/*\/DICOM\/*.dcm -o \/base\/Nifti\/ -f \/base\/Nifti\/code\/heuristic.py -s 01 -ss 001 -c dcm2niix -b --overwrite<\/pre>\n<\/div>\n<p>Once HeuDiConv completes running, the output is pictured below. We are ready to <a href=\"http:\/\/bids-standard.github.io\/bids-validator\/\">validate<\/a> this dataset.<a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/anat-completed-structure.png\"><br \/>\n<\/a><\/p>\n<p class=\"alignnone\"><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/ses1_output.png\"><img loading=\"lazy\" decoding=\"async\" class=\"wp-image-674 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/ses1_output.png\" alt=\"ses1_output\" width=\"362\" height=\"446\" \/><\/a><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/validate_1.png\"><img loading=\"lazy\" decoding=\"async\" class=\"wp-image-675 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/validate_1.png\" alt=\"validate_1\" width=\"363\" height=\"399\" \/><\/a><\/p>\n<p>We find this is a valid BIDS dataset.<\/p>\n<p><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/02\/Bids-valid-dataset.png\"><img loading=\"lazy\" decoding=\"async\" class=\" wp-image-419 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/02\/Bids-valid-dataset.png\" alt=\"Bids valid dataset\" width=\"316\" height=\"33\" \/><\/a><\/p>\n<p><strong><a id=\"heuman5\"><\/a>Step 5.<\/strong> We will now be adding in ses-005.\u00a0<a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/raw-Dicom-struture-T1-and-dwi.png\"><br \/>\n<\/a><\/p>\n<p><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/dicom_struc5.png\"><img loading=\"lazy\" decoding=\"async\" class=\"wp-image-676 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/dicom_struc5.png\" alt=\"dicom_struc5\" width=\"354\" height=\"218\" \/><\/a><\/p>\n<p>Similar to the approach taken for converting and organizing\u00a0the ses-001 images, we will be running HeuDiConv to get the dicominfo .tsv file. To do this, the syntax will follow closely to the call used for\u00a0<a href=\"#heuman2\">getting the ses-001 dicominfo file<\/a>.<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\">docker run --rm -it -v \/Users\/franklinfeingold\/Desktop\/HeuDiConv_walkthrough:\/base nipy\/heudiconv:latest -d \/base\/Dicom\/sub-{subject}\/ses-{session}\/SCANS\/*\/DICOM\/*.dcm -o \/base\/Nifti\/ -f convertall -s 01 -ss 005 -c none --overwrite<\/pre>\n<\/div>\n<p>This will output the dicominfo .tsv file for ses-005. Please\u00a0<a href=\"#heuman3\">copy the dicominfo .tsv file out of the .heudiconv directory<\/a>.<\/p>\n<p><strong><a id=\"heuman6\"><\/a>Step 6.<\/strong> We can begin adding to the <a href=\"#heuman3\">heuristic.py<\/a> file\u00a0to convert and organize the diffusion scans. To do this, we look at the dicominfo.tsv file and determine the condition to organize the scan. This will be added to the heuristic.py file.\u00a0<a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/dicominfo-session1_DTI.png\"><br \/>\n<\/a><\/p>\n<p><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/dicominfo_5.png\"><img loading=\"lazy\" decoding=\"async\" class=\"wp-image-677 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/dicominfo_5.png\" alt=\"dicominfo_5\" width=\"423\" height=\"162\" \/><\/a><\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\">import os\ndef create_key(template, outtype=('nii.gz',), annotation_classes=None):\n    if template is None or not template:\n        raise ValueError('Template must be a valid format string')\n    return template, outtype, annotation_classes\ndef infotodict(seqinfo):\n    \"\"\"Heuristic evaluator for determining which runs belong where\n    allowed template fields - follow python string module:\n    item: index within category\n    subject: participant id\n    seqitem: run number during scanning\n    subindex: sub index within group\n    \"\"\"\n    t1w = create_key('sub-{subject}\/{session}\/anat\/sub-{subject}_{session}_run-00{item:01d}_T1w')\n    func_rest = create_key('sub-{subject}\/{session}\/func\/sub-{subject}_{session}_task-rest_run-00{item:01d}_bold')\n\n    info = {t1w: [], func_rest: []}\n    \n    for idx, s in enumerate(seqinfo):\n        if (s.dim1 == 320) and (s.dim2 == 320) and ('t1_fl2d_tra' in s.protocol_name):\n            info[t1w].append(s.series_id)\n        if (s.dim1 == 128) and (s.dim2 == 128) and ('Resting State fMRI MBEPI' in s.protocol_name):\n            info[func_rest].append(s.series_id)\n    return info\n<\/pre>\n<\/div>\n<p><strong><a id=\"heuman7\"><\/a>Step 7.<\/strong> Now that we have the updated heuristic.py file, we can delete the dicominfo.tsv file and run HeuDiConv again to convert and organize ses-005.<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\">docker run --rm -it -v \/Users\/franklinfeingold\/Desktop\/HeuDiConv_walkthrough:\/base nipy\/heudiconv:latest -d \/base\/Dicom\/sub-{subject}\/ses-{session}\/SCANS\/*\/DICOM\/*.dcm -o \/base\/Nifti\/ -f \/base\/Nifti\/code\/heuristic.py -s 01 -ss 005 -c dcm2niix -b --overwrite\n<\/pre>\n<\/div>\n<p>We find that HeuDiConv converted and organized the scan, so we are ready to <a href=\"http:\/\/bids-standard.github.io\/bids-validator\/\">validate<\/a> our dataset. In addition, shown below is the file structure up to this point.<\/p>\n<p><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/convert_struc_5.png\"><img loading=\"lazy\" decoding=\"async\" class=\"wp-image-678 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/convert_struc_5.png\" alt=\"convert_struc_5\" width=\"335\" height=\"314\" \/><\/a><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/validate_5.png\"><img loading=\"lazy\" decoding=\"async\" class=\" wp-image-679 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/validate_5.png\" alt=\"validate_5\" width=\"337\" height=\"373\" \/><\/a><\/p>\n<p>We find this is a valid BIDS dataset.<\/p>\n<p><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/02\/Bids-valid-dataset.png\"><img loading=\"lazy\" decoding=\"async\" class=\" wp-image-419 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/02\/Bids-valid-dataset.png\" alt=\"Bids valid dataset\" width=\"287\" height=\"30\" \/><\/a><\/p>\n<p><strong><a id=\"heuman8\"><\/a>Step 8.<\/strong> Now we are ready to add in the ses-025 scans. The Dicom structure is pictured below.<\/p>\n<p><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/dicom_struc_25.png\"><img loading=\"lazy\" decoding=\"async\" class=\" wp-image-680 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/dicom_struc_25.png\" alt=\"dicom_struc_25\" width=\"267\" height=\"243\" \/><\/a><\/p>\n<p>Following the same approach taken\u00a0for\u00a0ses-001 and ses-005 conversation and organization, we will run HeuDiConv to get the dicominfo .tsv file.\u00a0To do this, the command will follow closely to the <a href=\"#heuman2\">HeuDiConv call used\u00a0above<\/a>.<\/p>\n<p>This will run and output the\u00a0dicominfo\u00a0.tsv file. <a href=\"#heuman3\">Copy the file out of the .heudiconv directory<\/a>.<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\">docker run --rm -it -v \/Users\/franklinfeingold\/Desktop\/HeuDiConv_walkthrough:\/base nipy\/heudiconv:latest -d \/base\/Dicom\/sub-{subject}\/ses-{session}\/SCANS\/*\/DICOM\/*.dcm -o \/base\/Nifti\/ -f convertall -s 01 -ss 025 -c none --overwrite\n<\/pre>\n<\/div>\n<p><strong><a id=\"heuman9\"><\/a>Step 9.<\/strong> We can determine the organizational rules for each of the scans from the dicominfo file and add them to the heuristic.py file. This follows the same process done for determining the rules to organize the <a href=\"#heuman3\">ses-001<\/a> and <a href=\"#heuman6\">ses-005<\/a> scans. We have pictured the dicominfo file and the completed heuristic.py file.<\/p>\n<p><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/dicominfo_25.png\"><img loading=\"lazy\" decoding=\"async\" class=\"wp-image-681 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/dicominfo_25.png\" alt=\"dicominfo_25\" width=\"517\" height=\"233\" \/><\/a><\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\">import os\ndef create_key(template, outtype=('nii.gz',), annotation_classes=None):\n    if template is None or not template:\n        raise ValueError('Template must be a valid format string')\n    return template, outtype, annotation_classes\ndef infotodict(seqinfo):\n    \"\"\"Heuristic evaluator for determining which runs belong where\n    allowed template fields - follow python string module:\n    item: index within category\n    subject: participant id\n    seqitem: run number during scanning\n    subindex: sub index within group\n    \"\"\"\n    t1w = create_key('sub-{subject}\/{session}\/anat\/sub-{subject}_{session}_run-00{item:01d}_T1w')\n    func_rest = create_key('sub-{subject}\/{session}\/func\/sub-{subject}_{session}_task-rest_run-00{item:01d}_bold')\n    func_rest_matrix96 =  create_key('sub-{subject}\/{session}\/func\/sub-{subject}_{session}_task-rest_run-00{item:01d}_bold')\n    func_rest_matrix96_sbref =  create_key('sub-{subject}\/{session}\/func\/sub-{subject}_{session}_task-rest_run-00{item:01d}_sbref')\n    fmap_mag =  create_key('sub-{subject}\/{session}\/fmap\/sub-{subject}_{session}_magnitude')\n    fmap_phase = create_key('sub-{subject}\/{session}\/fmap\/sub-{subject}_{session}_phasediff')\n    dwi = create_key('sub-{subject}\/{session}\/dwi\/sub-{subject}_{session}_run-00{item:01d}_dwi')\n\n    info = {t1w: [], func_rest: [],    func_rest_matrix96: [], func_rest_matrix96_sbref: [], fmap_mag: [], fmap_phase: [], dwi: []}\n    \n    for idx, s in enumerate(seqinfo):\n        if (s.dim1 == 320) and (s.dim2 == 320) and ('t1_fl2d_tra' in s.protocol_name):\n            info[t1w].append(s.series_id)\n        if (s.dim1 == 128) and (s.dim2 == 128) and ('Resting State fMRI MBEPI' in s.protocol_name):\n            info[func_rest].append(s.series_id)\n        if (s.dim1 == 96) and (s.dim4 == 518) and ('Resting State fMRI MBEPI_matrix96_BW2004' in s.protocol_name):\n            info[func_rest_matrix96].append(s.series_id)\n        if (s.dim1 == 96) and (s.dim4 == 1) and ('Resting State fMRI MBEPI_matrix96_BW2004' in s.protocol_name):\n            info[func_rest_matrix96_sbref].append(s.series_id)\n        if (s.dim3 == 136) and (s.dim4 == 1) and ('gre_field_mapping' in s.protocol_name):\n            info[fmap_mag] = [s.series_id]\n        if (s.dim3 == 68) and (s.dim4 == 1) and ('gre_field_mapping' in s.protocol_name):\n            info[fmap_phase] = [s.series_id]\n        if (s.dim2 == 128) and (s.dim4 == 64):\n            info[dwi].append(s.series_id)\n    return info\n<\/pre>\n<\/div>\n<p><strong><a id=\"heuman10\"><\/a>Step 10.<\/strong> We have updated the heuristic.py file, so we can delete the\u00a0dicominfo\u00a0.tsv file and run HeuDiConv again to convert and organize ses-025. The command to do\u00a0this\u00a0is seen below.<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\">docker run --rm -it -v \/Users\/franklinfeingold\/Desktop\/Heudiconv_walkthrough:\/base nipy\/heudiconv:latest -d \/base\/Dicom\/sub-{subject}\/ses-{session}\/SCANS\/*\/DICOM\/*.dcm -o \/base\/Nifti\/ -f \/base\/Nifti\/code\/heuristic.py -s 01 -ss 025 -c dcm2niix -b --overwrite\n<\/pre>\n<\/div>\n<p>After running HeuDiConv for ses-025, we are ready to <a href=\"http:\/\/bids-standard.github.io\/bids-validator\/\">validate<\/a> our dataset. We have pictured below the ses-025 Nifti file structure.<\/p>\n<p><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/convert_struc_25.png\"><img loading=\"lazy\" decoding=\"async\" class=\" wp-image-682 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/convert_struc_25.png\" alt=\"convert_struc_25\" width=\"302\" height=\"562\" \/><\/a><\/p>\n<p><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/upload_25-1.png\"><img loading=\"lazy\" decoding=\"async\" class=\" wp-image-684 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/03\/upload_25-1.png\" alt=\"upload_25\" width=\"304\" height=\"338\" \/><\/a><\/p>\n<p>We find this is a valid BIDS dataset!<\/p>\n<p><a href=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/02\/Bids-valid-dataset.png\"><img loading=\"lazy\" decoding=\"async\" class=\" wp-image-419 aligncenter\" src=\"http:\/\/reproducibility.stanford.edu\/wp-content\/uploads\/2018\/02\/Bids-valid-dataset.png\" alt=\"Bids valid dataset\" width=\"325\" height=\"34\" \/><\/a><\/p>\n<p>This tutorial demonstrated how to utilize HeuDiConv for converting DICOMs into a validated BIDS dataset. In the next part, we will walk through another off-the-shelf solution to consider for converting your datasets.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Introduction Welcome back to the next tutorial in the tutorial series &#8220;Getting Started with BIDS&#8221;. In this tutorial, we will be utilizing an off-the-shelf solution called HeuDiConv. This tutorial will illustrate\u00a0a detailed step-by-step guide on how to use HeuDiConv. The guide will take one subject and iteratively add one session at a time until the [&hellip;]<\/p>\n","protected":false},"author":4,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"_exactmetrics_skip_tracking":false,"_exactmetrics_sitenote_active":false,"_exactmetrics_sitenote_note":"","_exactmetrics_sitenote_category":0,"footnotes":""},"categories":[6],"tags":[],"class_list":["post-536","post","type-post","status-publish","format-standard","hentry","category-blog"],"_links":{"self":[{"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/posts\/536","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/users\/4"}],"replies":[{"embeddable":true,"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/comments?post=536"}],"version-history":[{"count":48,"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/posts\/536\/revisions"}],"predecessor-version":[{"id":1158,"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/posts\/536\/revisions\/1158"}],"wp:attachment":[{"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/media?parent=536"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/categories?post=536"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/reproducibility.stanford.edu\/wp-json\/wp\/v2\/tags?post=536"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}